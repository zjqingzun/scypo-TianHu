#### CONFIGURATION ####
# Compiler settings | 设置编译器
CXX = g++  # C++ compiler
CC = gcc   # C compiler

# Detect operating system | 检测操作系统
ifdef ComSpec
    OS = Windows
    SHELL = cmd.exe
    COPY = copy
    RM = del /f /q
    MKDIR = mkdir
    PATHSEP = \\
    BIN = TianHu.exe
    DLL_EXT = dll
    DLL_LIB_EXT = dll.lib
else ifeq ($(MSYSTEM),MINGW32)
    OS = Windows
    SHELL = cmd.exe
    COPY = copy
    RM = del /f /q
    MKDIR = mkdir
    PATHSEP = \\
    BIN = TianHu.exe
    DLL_EXT = dll
    DLL_LIB_EXT = dll.lib
else ifeq ($(MSYSTEM),MINGW64)
    OS = Windows
    SHELL = cmd.exe
    COPY = copy
    RM = del /f /q
    MKDIR = mkdir
    PATHSEP = \\
    BIN = TianHu.exe
    DLL_EXT = dll
    DLL_LIB_EXT = dll.lib
else
    UNAME_S := $(shell uname -s)
    ifeq ($(UNAME_S),Linux)
        OS = Linux
        COPY = cp
        RM = rm -f
        MKDIR = mkdir -p
        PATHSEP = /
        BIN = TianHu
        DLL_EXT = so
        DLL_LIB_EXT = so
    else ifeq ($(UNAME_S),Darwin)
        OS = macOS
        COPY = cp
        RM = rm -f
        MKDIR = mkdir -p
        PATHSEP = /
        BIN = TianHu
        DLL_EXT = dylib
        DLL_LIB_EXT = dylib
    else
        $(error Operating system not supported: $(UNAME_S))
    endif
endif

#### COMPILATION FLAGS ####
# Compilation flags for warnings and optimization | 编译标志，用于警告和优化
CPPFLAGS = -Wall -Wextra  # Common flags
CXXFLAGS = -Wall -Wextra  # C++ specific flags
DEBUGFLAGS = -g -DDEBUG   # Debug flags
RELEASEFLAGS = -O2        # Release optimization flags

#### DIRECTORIES ####
# Project directories | 项目目录
DAPP = app
DAC = app/core
DAU = app/user
DAP = app/proc
DLOG  = config/logs
DDECEN = decen
DCLASS0 = $(DDECEN)/0momo
DCIPH = config/ciph/target/release
DINCLUDE = include
DINCLUDERUST = include/cxx-secrust
DOBJ = obj
DRUST = plugins/rust
DRUSTSECRUST = $(DRUST)/secrust/target/release
DRUST0TRACE  = $(DRUST)/zerotrace/target/release
DSCRIPT = scripts
DTEST = tests

#### DYNAMIC LIBRARY DIRECTORY ####
# Paths to dynamic libraries and import libraries | 动态库和导入库的路径
DRUSTLCIPH = $(DCIPH)/ciph.$(DLL_LIB_EXT)
DRUSTDCIPH = $(DCIPH)/ciph.$(DLL_EXT)
DRUSTLSECRUST = $(DRUSTSECRUST)/secrust.$(DLL_LIB_EXT)
DRUSTDSECRUST = $(DRUSTSECRUST)/secrust.$(DLL_EXT)
DRUSTL0TRACE = $(DRUST0TRACE)/zerotrace.$(DLL_LIB_EXT)
DRUSTD0TRACE = $(DRUST0TRACE)/zerotrace.$(DLL_EXT)

#### OBJECT FILES ####
# Rule to create directories | 创建目录的规则
dirs:
ifeq ($(OS),Windows)
	-@if not exist "$(subst /,\,$(DOBJ))" $(MKDIR) "$(subst /,\,$(DOBJ))" && echo Created directory $(DOBJ) || echo Directory $(DOBJ) already exists
	-@if not exist "$(subst /,\,$(DLOG))" $(MKDIR) "$(subst /,\,$(DLOG))" && echo Created directory $(DLOG) || echo Directory $(DLOG) already exists
else
	-@$(MKDIR) $(DOBJ) && echo Created directory $(DOBJ) || echo Directory $(DOBJ) already exists
	-@$(MKDIR) $(DLOG) && echo Created directory $(DLOG) || echo Directory $(DLOG) already exists
endif

# List of object files in $(DOBJ) directory | $(DOBJ)目录中的目标文件列表
# \decen
DSYSSWARE = \
	$(DOBJ)/0momo.o

# List of object files in $(DOBJ) directory | $(DOBJ)目录中的目标文件列表
OBJS = \
	$(DOBJ)/char.o \
	$(DOBJ)/err.o \
	$(DOBJ)/file.o \
	$(DOBJ)/gui.o \
	$(DOBJ)/str.o \
	$(DOBJ)/main.o \
	$(DOBJ)/ctl.o \
	$(DOBJ)/cli.o \
	$(DOBJ)/cpright.o \
	$(DOBJ)/lang.o \
	$(DSYSSWARE)

# Print object files for debugging | 打印目标文件以进行调试
print-objs:
	@echo $(OBJS)

#### DEPENDENCIES ####
# Dependency files generated by -MMD | 由-MMD生成的依赖文件
DEPS = $(OBJS:.o=.d)

#### MAKE RULES ####
# Default target: Build the project in debug mode | 默认目标：以调试模式构建项目
all: debug

# Check versions of build tools | 检查构建工具的版本
check-tools:
	@echo Checking versions of build tools...
	@gcc --version | head -n 1
	@g++ --version | head -n 1
	@cargo --version
	@echo Build tools check completed.

# Debug build: Compile with debug flags and copy required DLLs | 调试构建：使用调试标志编译并复制所需DLL
debug: CPPFLAGS += $(DEBUGFLAGS)
debug: dirs check-tools $(DRUSTLCIPH) $(DRUSTLSECRUST) $(DRUSTL0TRACE) $(BIN) copy-dlls

# Release build: Compile with optimization flags and copy required DLLs | 发布构建：使用优化标志编译并复制所需DLL
release: CPPFLAGS += $(RELEASEFLAGS)
release: dirs check-tools $(DRUSTLCIPH) $(DRUSTLSECRUST) $(DRUSTL0TRACE) $(BIN) copy-dlls

# Rule to build Rust ciph crate | 构建Rust ciph crate的规则
$(DRUSTLCIPH):
	@if not exist "$(subst /,\,$(DRUSTLCIPH))" (cd config/ciph && cargo build --release) else (echo $(DRUSTLCIPH) already exists, skipping build)

# Rule to build Rust secrust crate | 构建Rust secrust crate的规则
$(DRUSTLSECRUST):
	@if not exist "$(subst /,\,$(DRUSTLSECRUST))" (cd plugins/rust/secrust && cargo build --release) else (echo $(DRUSTLSECRUST) already exists, skipping build)

# Rule to build Rust zerotrace crate | 构建Rust zerotrace crate的规则
$(DRUSTL0TRACE):
	@if not exist "$(subst /,\,$(DRUSTL0TRACE))" (cd plugins/rust/zerotrace && cargo build --release) else (echo $(DRUSTL0TRACE) already exists, skipping build)

# Link object files to create the executable | 链接目标文件以创建可执行文件
$(BIN): $(OBJS)
	$(CXX) $(CPPFLAGS) $(OBJS) -o $(BIN) $(DRUSTLCIPH) $(DRUSTLSECRUST) $(DRUSTL0TRACE) -L$(DCIPH) -L$(DRUSTSECRUST) -L$(DRUST0TRACE)
	@echo Linking completed: $(BIN) created successfully

# Rule to copy dynamic libraries to the current directory | 将动态库复制到当前目录的规则
copy-dlls: $(DRUSTDCIPH) $(DRUSTDSECRUST) $(DRUSTD0TRACE)
ifeq ($(OS),Windows)
	-@if exist "$(subst /,\,$(DRUSTDCIPH))" $(COPY) "$(subst /,\,$(DRUSTDCIPH))" . && echo Copied $(DRUSTDCIPH) to current directory
	-@if exist "$(subst /,\,$(DRUSTDSECRUST))" $(COPY) "$(subst /,\,$(DRUSTDSECRUST))" . && echo Copied $(DRUSTDSECRUST) to current directory
	-@if exist "$(subst /,\,$(DRUSTD0TRACE))" $(COPY) "$(subst /,\,$(DRUSTD0TRACE))" . && echo Copied $(DRUSTD0TRACE) to current directory
else
	-@if [ -f "$(DRUSTDCIPH)" ]; then $(COPY) "$(DRUSTDCIPH)" . && echo Copied $(DRUSTDCIPH) to current directory; fi
	-@if [ -f "$(DRUSTDSECRUST)" ]; then $(COPY) "$(DRUSTDSECRUST)" . && echo Copied $(DRUSTDSECRUST) to current directory; fi
	-@if [ -f "$(DRUSTD0TRACE)" ]; then $(COPY) "$(DRUSTD0TRACE)" . && echo Copied $(DRUSTD0TRACE) to current directory; fi
endif

# Compilation rules for C files in app/core | app/core中C文件的编译规则
$(DOBJ)/%.o: $(DAC)/%.c
	$(CC) $(CPPFLAGS) -I$(DINCLUDE) -I$(DINCLUDERUST) -MMD -MP -c $< -o $@
	@echo Compiled $< to $@

# Compilation rules for C++ files in app/proc | app/proc中C++文件的编译规则
$(DOBJ)/%.o: $(DAP)/%.cpp
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -I$(DINCLUDE) -I$(DINCLUDERUST) -MMD -MP -c $< -o $@
	@echo Compiled $< to $@

# Compilation rules for C++ files in app/user | app/user中C++文件的编译规则
$(DOBJ)/%.o: $(DAU)/%.cpp
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -I$(DINCLUDE) -I$(DINCLUDERUST) -MMD -MP -c $< -o $@
	@echo Compiled $< to $@

# Compilation rules for C++ files in decen | decen中C++文件的编译规则
$(DOBJ)/%.o: $(DCLASS0)/%.cpp
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -I$(DINCLUDE) -I$(DINCLUDERUST) -MMD -MP -c $< -o $@
	@echo Compiled $< to $@

# Include dependency files | 包含依赖文件
-include $(DEPS)

# Rule to check required files before running | 在运行前检查所需文件的规则
check-before-run: $(BIN)
	@echo Checking for required files...
ifeq ($(OS),Windows)
	-@if not exist "$(BIN)" echo Error: $(BIN) not found && exit /b 1
	-@if not exist "$(subst /,\,$(DRUSTDCIPH))" echo Error: $(DRUSTDCIPH) not found && exit /b 1
	-@if not exist "$(subst /,\,$(DRUSTDSECRUST))" echo Error: $(DRUSTDSECRUST) not found && exit /b 1
	-@if not exist "$(subst /,\,$(DRUSTD0TRACE))" echo Error: $(DRUSTD0TRACE) not found && exit /b 1
else
	-@if [ ! -f "$(BIN)" ]; then echo Error: $(BIN) not found; exit 1; fi
	-@if [ ! -f "$(DRUSTDCIPH)" ]; then echo Error: $(DRUSTDCIPH) not found; exit 1; fi
	-@if [ ! -f "$(DRUSTDSECRUST)" ]; then echo Error: $(DRUSTDSECRUST) not found; exit 1; fi
	-@if [ ! -f "$(DRUSTD0TRACE)" ]; then echo Error: $(DRUSTD0TRACE) not found; exit 1; fi
endif
	@echo All required files are present.

# Run the executable after checking required files | 在检查所需文件后运行可执行文件
run: check-before-run
	./$(BIN)

# Clean up all generated files | 清理所有生成的文件
clean:
ifeq ($(OS),Windows)
	-@$(RM) $(subst /,\,$(BIN)) 2>NUL
	-@$(RM) $(subst /,\,$(DOBJ)/*.o) 2>NUL
	-@$(RM) $(subst /,\,$(DOBJ)/*.d) 2>NUL
	-@$(RM) ciph.$(DLL_EXT) 2>NUL
	-@$(RM) secrust.$(DLL_EXT) 2>NUL
	-@$(RM) zerotrace.$(DLL_EXT) 2>NUL
else
	-@$(RM) $(BIN) $(DOBJ)/*.o $(DOBJ)/*.d ciph.$(DLL_EXT) secrust.$(DLL_EXT) zerotrace.$(DLL_EXT)
endif
	-@cd config/ciph && cargo clean
	-@cd plugins/rust/secrust && cargo clean
	-@cd plugins/rust/zerotrace && cargo clean

# Debug with gdb | 使用gdb调试
debug-gdb: $(BIN)
	gdb -q ./$(BIN)

# Declare phony targets | 声明伪目标
.PHONY: all debug release run clean debug-gdb print-objs copy-dlls dirs check-before-run check-tools